{"version":3,"sources":["components/quoteblock.js","App.js","serviceWorker.js","index.js"],"names":["quoteblock","props","state","content","author","colour","findQuote","bind","Rainbow","this","fetch","response","json","data","setState","colours","Math","floor","random","length","console","log","className","id","class","href","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAuEeA,E,YAnEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,GACTC,OAAQ,GACRC,OAAQ,IAEZ,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBARA,E,iFAWfE,KAAKH,c,sKAKkBI,MAAM,kC,cAAvBC,E,gBACaA,EAASC,O,OAAtBC,E,OACAR,EAASI,KAAKD,UAEpBC,KAAKK,UAAS,SAACZ,GAAD,MAAY,CACtBG,OAAQA,EACRF,QAASU,EAAKV,QACdC,OAAQS,EAAKT,W,sIAIjB,IAAMW,EAAU,CAAC,MACD,OACA,QACA,SACA,SACA,SACA,OACA,QAGVV,EADeU,EAAQC,KAAKC,MAAMD,KAAKE,SAASH,EAAQI,SAG9D,OADAC,QAAQC,IAAIhB,GACLA,I,+BAGP,OACI,yBAAKiB,UAAYb,KAAKP,MAAMG,OAAQ,yCAChC,yBAAKkB,GAAG,YAAYD,UAAYb,KAAKP,MAAMG,OAAS,gCAChD,yBAAKkB,GAAG,QACJ,uBAAGC,MAAM,sBACT,kCAASf,KAAKP,MAAMC,QAApB,KACA,uBAAGqB,MAAM,wBAEb,6BACI,uBAAGD,GAAG,UAAN,KAAkBd,KAAKP,MAAME,OAA7B,OAEJ,yBAAKkB,UAAU,WACX,yBAAKA,UAAU,mBACX,uBAAGG,KAAK,2BAA2BF,GAAG,eAAc,uBAAGC,MAAM,qBAEjE,yBAAKF,UAAU,mBACX,uBAAGC,GAAG,YAAYG,QAASjB,KAAKH,UAAWgB,UAAWb,KAAKP,MAAMG,OAAS,yB,GA5D7EsB,aCUVC,MANf,WACE,OACK,kBAAC,EAAD,OCIaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a6941bcf.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass quoteblock extends Component{\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: '',\r\n            author: '',\r\n            colour: ''\r\n        };\r\n        this.findQuote = this.findQuote.bind(this);\r\n        this.Rainbow = this.Rainbow.bind(this);\r\n      }\r\n    componentDidMount() {\r\n        this.findQuote();\r\n      }\r\n\r\n\r\n    async findQuote() {\r\n        const response = await fetch('https://api.quotable.io/random')\r\n        const data = await response.json()\r\n        const colour = this.Rainbow();\r\n        // console.log('colour',colour);\r\n        this.setState((state) => ({\r\n            colour: colour,\r\n            content: data.content,\r\n            author: data.author\r\n          }));\r\n    }\r\n    Rainbow () {\r\n        const colours = ['red',\r\n                        'blue',\r\n                        'green',\r\n                        'purple',\r\n                        'orange',\r\n                        'indigo', \r\n                        'pink',\r\n                        'teal',\r\n                        ]\r\n        const randomColour = colours[Math.floor(Math.random()*colours.length)];\r\n        const colour = randomColour;\r\n        console.log(colour);\r\n        return colour;\r\n    }\r\n    render(){\r\n        return(\r\n            <div className= {this.state.colour +' lighten-4 page center valign-wrapper'}>\r\n                <div id='quote-box' className= {this.state.colour + ' center container white-text'}>\r\n                    <div id=\"text\">\r\n                        <i class=\"fas fa-quote-left\"></i>\r\n                        <span > {this.state.content} </span>\r\n                        <i class=\"fas fa-quote-right\"></i>\r\n                    </div>\r\n                    <div>\r\n                        <p id=\"author\">- {this.state.author} -</p>\r\n                    </div>\r\n                    <div className=\"wrapper\">\r\n                        <div className='round z-depth-5'>\r\n                            <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\"><i class=\"fab fa-twitter\"></i></a>\r\n                        </div>\r\n                        <div className='round z-depth-5'>\r\n                            <i id=\"new-quote\" onClick={this.findQuote} className={this.state.colour + \" fas fa-redo\"}></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default quoteblock;","import React from 'react';\nimport './App.css';\nimport Quoteblock from './components/quoteblock';\n\n\n\nfunction App() {\n  return (\n       <Quoteblock />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}